// Generated by CoffeeScript 1.6.3
(function() {
  var Interpretor, KnowledgeTree, fs;

  fs = require('fs');

  Interpretor = (function() {
    function Interpretor() {
      this.ktree = new KnowledgeTree(null, null);
    }

    Interpretor.prototype.run = function(program) {
      return this.evalFile(program);
    };

    Interpretor.prototype.evalFile = function(program) {
      var _this = this;
      return fs.readFile(program, 'utf8', function(err, script) {
        if (err) {
          throw err;
        }
        return _this["eval"](script);
      });
    };

    Interpretor.prototype["eval"] = function(script) {
      var statement, statements, _i, _len, _results;
      statements = script.split(".");
      _results = [];
      for (_i = 0, _len = statements.length; _i < _len; _i++) {
        statement = statements[_i];
        _results.push(this.evalStatement(statement));
      }
      return _results;
    };

    Interpretor.prototype.evalStatement = function(statement) {
      var atoms;
      statement = statement.trim(statement);
      if (statement === "") {
        return;
      }
      atoms = this.splitAtoms(statement);
      return this.fact(atoms);
    };

    Interpretor.prototype.fact = function(atoms) {
      var atom, i, match, node, _i, _len, _results;
      node = this.ktree;
      _results = [];
      for (i = _i = 0, _len = atoms.length; _i < _len; i = ++_i) {
        atom = atoms[i];
        match = node.match(atom);
        if (match) {
          _results.push(node = match);
        } else {
          node.fact(atoms.slice(i));
          break;
        }
      }
      return _results;
    };

    Interpretor.prototype.splitAtoms = function(statement) {
      var atoms;
      atoms = statement.split(" ");
      return atoms;
    };

    return Interpretor;

  })();

  KnowledgeTree = (function() {
    function KnowledgeTree(atom, parent) {
      this.atom = atom;
      this.parent = parent;
      this.branch = [];
      this.count = 0;
    }

    KnowledgeTree.prototype.match = function(atom) {
      var b, _i, _len, _ref;
      _ref = this.branch;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        if (b.atom === atom) {
          return b;
        }
      }
      return null;
    };

    KnowledgeTree.prototype.add = function(atom) {
      var node;
      node = new KnowledgeTree(atom, this);
      this.branch.push(node);
      this.count = this.count + 1;
      return node;
    };

    KnowledgeTree.prototype.fact = function(atoms) {
      var atom, parent, _i, _len, _results;
      parent = this;
      _results = [];
      for (_i = 0, _len = atoms.length; _i < _len; _i++) {
        atom = atoms[_i];
        parent = parent.add(atom);
        _results.push(console.log(parent));
      }
      return _results;
    };

    KnowledgeTree.prototype.dump = function() {
      return dumpN(0);
    };

    KnowledgeTree.prototype.dumpN = function(depth) {
      var b, _i, _len, _ref, _results;
      console.log("%d\n", this.branch.size);
      _ref = this.branch;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        console.log("%s> %s", Array(depth).join('--'), b.atom);
        _results.push(b.dumpN(depth + 1));
      }
      return _results;
    };

    return KnowledgeTree;

  })();

  exports.cli = function() {
    var file, intr, program;
    program = require('commander');
    program.version('0.0.1').option('-e, --exec [code]', 'Execute code').option('-v, --version', 'Output version information').option('-h, --help', 'Show usage information').parse(process.argv);
    if (program.args.length === 1) {
      file = program.args[0];
      intr = new Interpretor;
      return intr.run(file);
    } else {
      return console.log("Error: too many arguments");
    }
  };

}).call(this);
